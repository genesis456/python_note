*******************电子词典　项目＊＊＊＊＊＊＊＊＊＊＊
在线词典




1.确定好技术方案. (套接字，并发，细节确定)
*tcp
*Process多进程　
*历史记录：　前10条
*注册成功　　直接登录

2.数据表进行建立(dict : words)
*本身已有一个单词表了
*用户登录及注册需要一个：用户表　user--> id name  passwd
mysql> create table user (id int primary key auto_increment,
name varchar(32) not null,passwd varchar(128) not null);

*查询历史记录：　历史记录表　hist--> id name word time
#记录时间是在插入时，那就默认为插入时的当前时间

mysql> create table hist (id int primary key auto_increment,
name varchar(32) not null,word varchar(28) not null,
time datetime default now());

3.结构设计: 几个模块,怎么封装设计，功能是什么

    客户端

    服务端：逻辑请求处理，数据库处理

    函数封装：直接写一个功能程序提供给使用者使用．
    使用者直接运行，而不是需要使用我的代码的某一部分．


4.功能分析和通信搭建

＊网络搭建
＊注册
＊登录
＊查单词
＊历史记录


5.罗 列功能逻辑( 每个功能确定服务端和客户端该做什么，编写代码测试)

＃一切产品项目，都得先从客户的角度出发，思考问题

＊注册　　客户端：输入注册信息
                发送请求
                得到反馈

        服务端：　接收请求
                判断是否允许注册
                允许注册后，就将用户信息存入数据库
                给客户端反馈结果

＊登录     客户端：　输入用户名和密码
                   发送请求给服务器
                   得到服务器反馈

          服务端：　　接收请求
                    判断是否允许登录
                    发送结果

＊查单词    客户端：　　输入单词
                    　发送请求
                    　等待接收结果

           服务端：　　接收请求
                     查找单词
                     发送结果
                     插入历史记录


＊历史记录

6. 设定客户端服务器协议
    ＊注册　　Ｒ
    ＊登录　　Ｌ
    ＊查单词　Ｑ
    ＊历史记录　Ｈ
    退出　　


cookie:
    import getpass

    getpass.getpass()
    功能：隐藏输入内容

cookie

    import hashlib

    生成加密对象
    hash = hashlib.md5()

    对密码进行加密（passwd是你要加密的密码）
    hash.update(passwd.encode())

    加密后的密码（返回加密后的字串）
    pwd = hash.hexdigest()


作业：　1.完成历史记录　（查看最近10条记录）
           如果没有历史记录则打印没有该历史记录

       2.复习HTTP协议，httpserver v2.0
